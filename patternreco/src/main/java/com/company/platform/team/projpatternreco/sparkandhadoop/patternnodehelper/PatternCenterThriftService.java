/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.company.platform.team.projpatternreco.sparkandhadoop.patternnodehelper;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-07-07")
public class PatternCenterThriftService {

  public interface Iface {

    public java.lang.String getNodes(java.lang.String projectName, int nodeLevel) throws org.apache.thrift.TException;

    public java.lang.String synchronizeNodes(java.lang.String projectName, int nodeLevel, long latestUpdatedTime) throws org.apache.thrift.TException;

    public java.lang.String addNode(java.lang.String nodeInfo, long latestUpdatedTime) throws org.apache.thrift.TException;

    public java.lang.String updateNode(java.lang.String nodeInfo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getNodes(java.lang.String projectName, int nodeLevel, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void synchronizeNodes(java.lang.String projectName, int nodeLevel, long latestUpdatedTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void addNode(java.lang.String nodeInfo, long latestUpdatedTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void updateNode(java.lang.String nodeInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String getNodes(java.lang.String projectName, int nodeLevel) throws org.apache.thrift.TException
    {
      send_getNodes(projectName, nodeLevel);
      return recv_getNodes();
    }

    public void send_getNodes(java.lang.String projectName, int nodeLevel) throws org.apache.thrift.TException
    {
      getNodes_args args = new getNodes_args();
      args.setProjectName(projectName);
      args.setNodeLevel(nodeLevel);
      sendBase("getNodes", args);
    }

    public java.lang.String recv_getNodes() throws org.apache.thrift.TException
    {
      getNodes_result result = new getNodes_result();
      receiveBase(result, "getNodes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNodes failed: unknown result");
    }

    public java.lang.String synchronizeNodes(java.lang.String projectName, int nodeLevel, long latestUpdatedTime) throws org.apache.thrift.TException
    {
      send_synchronizeNodes(projectName, nodeLevel, latestUpdatedTime);
      return recv_synchronizeNodes();
    }

    public void send_synchronizeNodes(java.lang.String projectName, int nodeLevel, long latestUpdatedTime) throws org.apache.thrift.TException
    {
      synchronizeNodes_args args = new synchronizeNodes_args();
      args.setProjectName(projectName);
      args.setNodeLevel(nodeLevel);
      args.setLatestUpdatedTime(latestUpdatedTime);
      sendBase("synchronizeNodes", args);
    }

    public java.lang.String recv_synchronizeNodes() throws org.apache.thrift.TException
    {
      synchronizeNodes_result result = new synchronizeNodes_result();
      receiveBase(result, "synchronizeNodes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "synchronizeNodes failed: unknown result");
    }

    public java.lang.String addNode(java.lang.String nodeInfo, long latestUpdatedTime) throws org.apache.thrift.TException
    {
      send_addNode(nodeInfo, latestUpdatedTime);
      return recv_addNode();
    }

    public void send_addNode(java.lang.String nodeInfo, long latestUpdatedTime) throws org.apache.thrift.TException
    {
      addNode_args args = new addNode_args();
      args.setNodeInfo(nodeInfo);
      args.setLatestUpdatedTime(latestUpdatedTime);
      sendBase("addNode", args);
    }

    public java.lang.String recv_addNode() throws org.apache.thrift.TException
    {
      addNode_result result = new addNode_result();
      receiveBase(result, "addNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addNode failed: unknown result");
    }

    public java.lang.String updateNode(java.lang.String nodeInfo) throws org.apache.thrift.TException
    {
      send_updateNode(nodeInfo);
      return recv_updateNode();
    }

    public void send_updateNode(java.lang.String nodeInfo) throws org.apache.thrift.TException
    {
      updateNode_args args = new updateNode_args();
      args.setNodeInfo(nodeInfo);
      sendBase("updateNode", args);
    }

    public java.lang.String recv_updateNode() throws org.apache.thrift.TException
    {
      updateNode_result result = new updateNode_result();
      receiveBase(result, "updateNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateNode failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getNodes(java.lang.String projectName, int nodeLevel, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNodes_call method_call = new getNodes_call(projectName, nodeLevel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNodes_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String projectName;
      private int nodeLevel;
      public getNodes_call(java.lang.String projectName, int nodeLevel, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectName = projectName;
        this.nodeLevel = nodeLevel;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNodes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNodes_args args = new getNodes_args();
        args.setProjectName(projectName);
        args.setNodeLevel(nodeLevel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNodes();
      }
    }

    public void synchronizeNodes(java.lang.String projectName, int nodeLevel, long latestUpdatedTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      synchronizeNodes_call method_call = new synchronizeNodes_call(projectName, nodeLevel, latestUpdatedTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class synchronizeNodes_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String projectName;
      private int nodeLevel;
      private long latestUpdatedTime;
      public synchronizeNodes_call(java.lang.String projectName, int nodeLevel, long latestUpdatedTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectName = projectName;
        this.nodeLevel = nodeLevel;
        this.latestUpdatedTime = latestUpdatedTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("synchronizeNodes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        synchronizeNodes_args args = new synchronizeNodes_args();
        args.setProjectName(projectName);
        args.setNodeLevel(nodeLevel);
        args.setLatestUpdatedTime(latestUpdatedTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_synchronizeNodes();
      }
    }

    public void addNode(java.lang.String nodeInfo, long latestUpdatedTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addNode_call method_call = new addNode_call(nodeInfo, latestUpdatedTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addNode_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String nodeInfo;
      private long latestUpdatedTime;
      public addNode_call(java.lang.String nodeInfo, long latestUpdatedTime, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeInfo = nodeInfo;
        this.latestUpdatedTime = latestUpdatedTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addNode_args args = new addNode_args();
        args.setNodeInfo(nodeInfo);
        args.setLatestUpdatedTime(latestUpdatedTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addNode();
      }
    }

    public void updateNode(java.lang.String nodeInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateNode_call method_call = new updateNode_call(nodeInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateNode_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String nodeInfo;
      public updateNode_call(java.lang.String nodeInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeInfo = nodeInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateNode_args args = new updateNode_args();
        args.setNodeInfo(nodeInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateNode();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getNodes", new getNodes());
      processMap.put("synchronizeNodes", new synchronizeNodes());
      processMap.put("addNode", new addNode());
      processMap.put("updateNode", new updateNode());
      return processMap;
    }

    public static class getNodes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNodes_args> {
      public getNodes() {
        super("getNodes");
      }

      public getNodes_args getEmptyArgsInstance() {
        return new getNodes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getNodes_result getResult(I iface, getNodes_args args) throws org.apache.thrift.TException {
        getNodes_result result = new getNodes_result();
        result.success = iface.getNodes(args.projectName, args.nodeLevel);
        return result;
      }
    }

    public static class synchronizeNodes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, synchronizeNodes_args> {
      public synchronizeNodes() {
        super("synchronizeNodes");
      }

      public synchronizeNodes_args getEmptyArgsInstance() {
        return new synchronizeNodes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public synchronizeNodes_result getResult(I iface, synchronizeNodes_args args) throws org.apache.thrift.TException {
        synchronizeNodes_result result = new synchronizeNodes_result();
        result.success = iface.synchronizeNodes(args.projectName, args.nodeLevel, args.latestUpdatedTime);
        return result;
      }
    }

    public static class addNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addNode_args> {
      public addNode() {
        super("addNode");
      }

      public addNode_args getEmptyArgsInstance() {
        return new addNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addNode_result getResult(I iface, addNode_args args) throws org.apache.thrift.TException {
        addNode_result result = new addNode_result();
        result.success = iface.addNode(args.nodeInfo, args.latestUpdatedTime);
        return result;
      }
    }

    public static class updateNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateNode_args> {
      public updateNode() {
        super("updateNode");
      }

      public updateNode_args getEmptyArgsInstance() {
        return new updateNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateNode_result getResult(I iface, updateNode_args args) throws org.apache.thrift.TException {
        updateNode_result result = new updateNode_result();
        result.success = iface.updateNode(args.nodeInfo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getNodes", new getNodes());
      processMap.put("synchronizeNodes", new synchronizeNodes());
      processMap.put("addNode", new addNode());
      processMap.put("updateNode", new updateNode());
      return processMap;
    }

    public static class getNodes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNodes_args, java.lang.String> {
      public getNodes() {
        super("getNodes");
      }

      public getNodes_args getEmptyArgsInstance() {
        return new getNodes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getNodes_result result = new getNodes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getNodes_result result = new getNodes_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNodes_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getNodes(args.projectName, args.nodeLevel,resultHandler);
      }
    }

    public static class synchronizeNodes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, synchronizeNodes_args, java.lang.String> {
      public synchronizeNodes() {
        super("synchronizeNodes");
      }

      public synchronizeNodes_args getEmptyArgsInstance() {
        return new synchronizeNodes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            synchronizeNodes_result result = new synchronizeNodes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            synchronizeNodes_result result = new synchronizeNodes_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, synchronizeNodes_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.synchronizeNodes(args.projectName, args.nodeLevel, args.latestUpdatedTime,resultHandler);
      }
    }

    public static class addNode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addNode_args, java.lang.String> {
      public addNode() {
        super("addNode");
      }

      public addNode_args getEmptyArgsInstance() {
        return new addNode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            addNode_result result = new addNode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addNode_result result = new addNode_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addNode_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.addNode(args.nodeInfo, args.latestUpdatedTime,resultHandler);
      }
    }

    public static class updateNode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateNode_args, java.lang.String> {
      public updateNode() {
        super("updateNode");
      }

      public updateNode_args getEmptyArgsInstance() {
        return new updateNode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            updateNode_result result = new updateNode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateNode_result result = new updateNode_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateNode_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.updateNode(args.nodeInfo,resultHandler);
      }
    }

  }

  public static class getNodes_args implements org.apache.thrift.TBase<getNodes_args, getNodes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNodes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNodes_args");

    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeLevel", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNodes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNodes_argsTupleSchemeFactory();

    public java.lang.String projectName; // required
    public int nodeLevel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_NAME((short)1, "projectName"),
      NODE_LEVEL((short)2, "nodeLevel");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_NAME
            return PROJECT_NAME;
          case 2: // NODE_LEVEL
            return NODE_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NODELEVEL_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("nodeLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNodes_args.class, metaDataMap);
    }

    public getNodes_args() {
    }

    public getNodes_args(
      java.lang.String projectName,
      int nodeLevel)
    {
      this();
      this.projectName = projectName;
      this.nodeLevel = nodeLevel;
      setNodeLevelIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNodes_args(getNodes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
      this.nodeLevel = other.nodeLevel;
    }

    public getNodes_args deepCopy() {
      return new getNodes_args(this);
    }

    @Override
    public void clear() {
      this.projectName = null;
      setNodeLevelIsSet(false);
      this.nodeLevel = 0;
    }

    public java.lang.String getProjectName() {
      return this.projectName;
    }

    public getNodes_args setProjectName(java.lang.String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public int getNodeLevel() {
      return this.nodeLevel;
    }

    public getNodes_args setNodeLevel(int nodeLevel) {
      this.nodeLevel = nodeLevel;
      setNodeLevelIsSet(true);
      return this;
    }

    public void unsetNodeLevel() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODELEVEL_ISSET_ID);
    }

    /** Returns true if field nodeLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeLevel() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODELEVEL_ISSET_ID);
    }

    public void setNodeLevelIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODELEVEL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((java.lang.String)value);
        }
        break;

      case NODE_LEVEL:
        if (value == null) {
          unsetNodeLevel();
        } else {
          setNodeLevel((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_NAME:
        return getProjectName();

      case NODE_LEVEL:
        return getNodeLevel();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_NAME:
        return isSetProjectName();
      case NODE_LEVEL:
        return isSetNodeLevel();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getNodes_args)
        return this.equals((getNodes_args)that);
      return false;
    }

    public boolean equals(getNodes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      boolean this_present_nodeLevel = true;
      boolean that_present_nodeLevel = true;
      if (this_present_nodeLevel || that_present_nodeLevel) {
        if (!(this_present_nodeLevel && that_present_nodeLevel))
          return false;
        if (this.nodeLevel != that.nodeLevel)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProjectName()) ? 131071 : 524287);
      if (isSetProjectName())
        hashCode = hashCode * 8191 + projectName.hashCode();

      hashCode = hashCode * 8191 + nodeLevel;

      return hashCode;
    }

    @Override
    public int compareTo(getNodes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeLevel()).compareTo(other.isSetNodeLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeLevel, other.nodeLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNodes_args(");
      boolean first = true;

      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeLevel:");
      sb.append(this.nodeLevel);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNodes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNodes_argsStandardScheme getScheme() {
        return new getNodes_argsStandardScheme();
      }
    }

    private static class getNodes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNodes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nodeLevel = iprot.readI32();
                struct.setNodeLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNodes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NODE_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.nodeLevel);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNodes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNodes_argsTupleScheme getScheme() {
        return new getNodes_argsTupleScheme();
      }
    }

    private static class getNodes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNodes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProjectName()) {
          optionals.set(0);
        }
        if (struct.isSetNodeLevel()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProjectName()) {
          oprot.writeString(struct.projectName);
        }
        if (struct.isSetNodeLevel()) {
          oprot.writeI32(struct.nodeLevel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.projectName = iprot.readString();
          struct.setProjectNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeLevel = iprot.readI32();
          struct.setNodeLevelIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getNodes_result implements org.apache.thrift.TBase<getNodes_result, getNodes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNodes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNodes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNodes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNodes_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNodes_result.class, metaDataMap);
    }

    public getNodes_result() {
    }

    public getNodes_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNodes_result(getNodes_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getNodes_result deepCopy() {
      return new getNodes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getNodes_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getNodes_result)
        return this.equals((getNodes_result)that);
      return false;
    }

    public boolean equals(getNodes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNodes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNodes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNodes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNodes_resultStandardScheme getScheme() {
        return new getNodes_resultStandardScheme();
      }
    }

    private static class getNodes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNodes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNodes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNodes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getNodes_resultTupleScheme getScheme() {
        return new getNodes_resultTupleScheme();
      }
    }

    private static class getNodes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNodes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class synchronizeNodes_args implements org.apache.thrift.TBase<synchronizeNodes_args, synchronizeNodes_args._Fields>, java.io.Serializable, Cloneable, Comparable<synchronizeNodes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchronizeNodes_args");

    private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeLevel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LATEST_UPDATED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("latestUpdatedTime", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new synchronizeNodes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new synchronizeNodes_argsTupleSchemeFactory();

    public java.lang.String projectName; // required
    public int nodeLevel; // required
    public long latestUpdatedTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_NAME((short)1, "projectName"),
      NODE_LEVEL((short)2, "nodeLevel"),
      LATEST_UPDATED_TIME((short)3, "latestUpdatedTime");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_NAME
            return PROJECT_NAME;
          case 2: // NODE_LEVEL
            return NODE_LEVEL;
          case 3: // LATEST_UPDATED_TIME
            return LATEST_UPDATED_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NODELEVEL_ISSET_ID = 0;
    private static final int __LATESTUPDATEDTIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("nodeLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.LATEST_UPDATED_TIME, new org.apache.thrift.meta_data.FieldMetaData("latestUpdatedTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchronizeNodes_args.class, metaDataMap);
    }

    public synchronizeNodes_args() {
    }

    public synchronizeNodes_args(
      java.lang.String projectName,
      int nodeLevel,
      long latestUpdatedTime)
    {
      this();
      this.projectName = projectName;
      this.nodeLevel = nodeLevel;
      setNodeLevelIsSet(true);
      this.latestUpdatedTime = latestUpdatedTime;
      setLatestUpdatedTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchronizeNodes_args(synchronizeNodes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProjectName()) {
        this.projectName = other.projectName;
      }
      this.nodeLevel = other.nodeLevel;
      this.latestUpdatedTime = other.latestUpdatedTime;
    }

    public synchronizeNodes_args deepCopy() {
      return new synchronizeNodes_args(this);
    }

    @Override
    public void clear() {
      this.projectName = null;
      setNodeLevelIsSet(false);
      this.nodeLevel = 0;
      setLatestUpdatedTimeIsSet(false);
      this.latestUpdatedTime = 0;
    }

    public java.lang.String getProjectName() {
      return this.projectName;
    }

    public synchronizeNodes_args setProjectName(java.lang.String projectName) {
      this.projectName = projectName;
      return this;
    }

    public void unsetProjectName() {
      this.projectName = null;
    }

    /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectName() {
      return this.projectName != null;
    }

    public void setProjectNameIsSet(boolean value) {
      if (!value) {
        this.projectName = null;
      }
    }

    public int getNodeLevel() {
      return this.nodeLevel;
    }

    public synchronizeNodes_args setNodeLevel(int nodeLevel) {
      this.nodeLevel = nodeLevel;
      setNodeLevelIsSet(true);
      return this;
    }

    public void unsetNodeLevel() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NODELEVEL_ISSET_ID);
    }

    /** Returns true if field nodeLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeLevel() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NODELEVEL_ISSET_ID);
    }

    public void setNodeLevelIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NODELEVEL_ISSET_ID, value);
    }

    public long getLatestUpdatedTime() {
      return this.latestUpdatedTime;
    }

    public synchronizeNodes_args setLatestUpdatedTime(long latestUpdatedTime) {
      this.latestUpdatedTime = latestUpdatedTime;
      setLatestUpdatedTimeIsSet(true);
      return this;
    }

    public void unsetLatestUpdatedTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LATESTUPDATEDTIME_ISSET_ID);
    }

    /** Returns true if field latestUpdatedTime is set (has been assigned a value) and false otherwise */
    public boolean isSetLatestUpdatedTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LATESTUPDATEDTIME_ISSET_ID);
    }

    public void setLatestUpdatedTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LATESTUPDATEDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROJECT_NAME:
        if (value == null) {
          unsetProjectName();
        } else {
          setProjectName((java.lang.String)value);
        }
        break;

      case NODE_LEVEL:
        if (value == null) {
          unsetNodeLevel();
        } else {
          setNodeLevel((java.lang.Integer)value);
        }
        break;

      case LATEST_UPDATED_TIME:
        if (value == null) {
          unsetLatestUpdatedTime();
        } else {
          setLatestUpdatedTime((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_NAME:
        return getProjectName();

      case NODE_LEVEL:
        return getNodeLevel();

      case LATEST_UPDATED_TIME:
        return getLatestUpdatedTime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_NAME:
        return isSetProjectName();
      case NODE_LEVEL:
        return isSetNodeLevel();
      case LATEST_UPDATED_TIME:
        return isSetLatestUpdatedTime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof synchronizeNodes_args)
        return this.equals((synchronizeNodes_args)that);
      return false;
    }

    public boolean equals(synchronizeNodes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_projectName = true && this.isSetProjectName();
      boolean that_present_projectName = true && that.isSetProjectName();
      if (this_present_projectName || that_present_projectName) {
        if (!(this_present_projectName && that_present_projectName))
          return false;
        if (!this.projectName.equals(that.projectName))
          return false;
      }

      boolean this_present_nodeLevel = true;
      boolean that_present_nodeLevel = true;
      if (this_present_nodeLevel || that_present_nodeLevel) {
        if (!(this_present_nodeLevel && that_present_nodeLevel))
          return false;
        if (this.nodeLevel != that.nodeLevel)
          return false;
      }

      boolean this_present_latestUpdatedTime = true;
      boolean that_present_latestUpdatedTime = true;
      if (this_present_latestUpdatedTime || that_present_latestUpdatedTime) {
        if (!(this_present_latestUpdatedTime && that_present_latestUpdatedTime))
          return false;
        if (this.latestUpdatedTime != that.latestUpdatedTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProjectName()) ? 131071 : 524287);
      if (isSetProjectName())
        hashCode = hashCode * 8191 + projectName.hashCode();

      hashCode = hashCode * 8191 + nodeLevel;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(latestUpdatedTime);

      return hashCode;
    }

    @Override
    public int compareTo(synchronizeNodes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeLevel()).compareTo(other.isSetNodeLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeLevel, other.nodeLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLatestUpdatedTime()).compareTo(other.isSetLatestUpdatedTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLatestUpdatedTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestUpdatedTime, other.latestUpdatedTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("synchronizeNodes_args(");
      boolean first = true;

      sb.append("projectName:");
      if (this.projectName == null) {
        sb.append("null");
      } else {
        sb.append(this.projectName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeLevel:");
      sb.append(this.nodeLevel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("latestUpdatedTime:");
      sb.append(this.latestUpdatedTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class synchronizeNodes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public synchronizeNodes_argsStandardScheme getScheme() {
        return new synchronizeNodes_argsStandardScheme();
      }
    }

    private static class synchronizeNodes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<synchronizeNodes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchronizeNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectName = iprot.readString();
                struct.setProjectNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nodeLevel = iprot.readI32();
                struct.setNodeLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LATEST_UPDATED_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.latestUpdatedTime = iprot.readI64();
                struct.setLatestUpdatedTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchronizeNodes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectName != null) {
          oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
          oprot.writeString(struct.projectName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NODE_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.nodeLevel);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LATEST_UPDATED_TIME_FIELD_DESC);
        oprot.writeI64(struct.latestUpdatedTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchronizeNodes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public synchronizeNodes_argsTupleScheme getScheme() {
        return new synchronizeNodes_argsTupleScheme();
      }
    }

    private static class synchronizeNodes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<synchronizeNodes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchronizeNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProjectName()) {
          optionals.set(0);
        }
        if (struct.isSetNodeLevel()) {
          optionals.set(1);
        }
        if (struct.isSetLatestUpdatedTime()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProjectName()) {
          oprot.writeString(struct.projectName);
        }
        if (struct.isSetNodeLevel()) {
          oprot.writeI32(struct.nodeLevel);
        }
        if (struct.isSetLatestUpdatedTime()) {
          oprot.writeI64(struct.latestUpdatedTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchronizeNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.projectName = iprot.readString();
          struct.setProjectNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeLevel = iprot.readI32();
          struct.setNodeLevelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.latestUpdatedTime = iprot.readI64();
          struct.setLatestUpdatedTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class synchronizeNodes_result implements org.apache.thrift.TBase<synchronizeNodes_result, synchronizeNodes_result._Fields>, java.io.Serializable, Cloneable, Comparable<synchronizeNodes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("synchronizeNodes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new synchronizeNodes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new synchronizeNodes_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(synchronizeNodes_result.class, metaDataMap);
    }

    public synchronizeNodes_result() {
    }

    public synchronizeNodes_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public synchronizeNodes_result(synchronizeNodes_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public synchronizeNodes_result deepCopy() {
      return new synchronizeNodes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public synchronizeNodes_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof synchronizeNodes_result)
        return this.equals((synchronizeNodes_result)that);
      return false;
    }

    public boolean equals(synchronizeNodes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(synchronizeNodes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("synchronizeNodes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class synchronizeNodes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public synchronizeNodes_resultStandardScheme getScheme() {
        return new synchronizeNodes_resultStandardScheme();
      }
    }

    private static class synchronizeNodes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<synchronizeNodes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, synchronizeNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, synchronizeNodes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class synchronizeNodes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public synchronizeNodes_resultTupleScheme getScheme() {
        return new synchronizeNodes_resultTupleScheme();
      }
    }

    private static class synchronizeNodes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<synchronizeNodes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, synchronizeNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, synchronizeNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addNode_args implements org.apache.thrift.TBase<addNode_args, addNode_args._Fields>, java.io.Serializable, Cloneable, Comparable<addNode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNode_args");

    private static final org.apache.thrift.protocol.TField NODE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfo", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LATEST_UPDATED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("latestUpdatedTime", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNode_argsTupleSchemeFactory();

    public java.lang.String nodeInfo; // required
    public long latestUpdatedTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_INFO((short)1, "nodeInfo"),
      LATEST_UPDATED_TIME((short)2, "latestUpdatedTime");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_INFO
            return NODE_INFO;
          case 2: // LATEST_UPDATED_TIME
            return LATEST_UPDATED_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LATESTUPDATEDTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LATEST_UPDATED_TIME, new org.apache.thrift.meta_data.FieldMetaData("latestUpdatedTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNode_args.class, metaDataMap);
    }

    public addNode_args() {
    }

    public addNode_args(
      java.lang.String nodeInfo,
      long latestUpdatedTime)
    {
      this();
      this.nodeInfo = nodeInfo;
      this.latestUpdatedTime = latestUpdatedTime;
      setLatestUpdatedTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNode_args(addNode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetNodeInfo()) {
        this.nodeInfo = other.nodeInfo;
      }
      this.latestUpdatedTime = other.latestUpdatedTime;
    }

    public addNode_args deepCopy() {
      return new addNode_args(this);
    }

    @Override
    public void clear() {
      this.nodeInfo = null;
      setLatestUpdatedTimeIsSet(false);
      this.latestUpdatedTime = 0;
    }

    public java.lang.String getNodeInfo() {
      return this.nodeInfo;
    }

    public addNode_args setNodeInfo(java.lang.String nodeInfo) {
      this.nodeInfo = nodeInfo;
      return this;
    }

    public void unsetNodeInfo() {
      this.nodeInfo = null;
    }

    /** Returns true if field nodeInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeInfo() {
      return this.nodeInfo != null;
    }

    public void setNodeInfoIsSet(boolean value) {
      if (!value) {
        this.nodeInfo = null;
      }
    }

    public long getLatestUpdatedTime() {
      return this.latestUpdatedTime;
    }

    public addNode_args setLatestUpdatedTime(long latestUpdatedTime) {
      this.latestUpdatedTime = latestUpdatedTime;
      setLatestUpdatedTimeIsSet(true);
      return this;
    }

    public void unsetLatestUpdatedTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LATESTUPDATEDTIME_ISSET_ID);
    }

    /** Returns true if field latestUpdatedTime is set (has been assigned a value) and false otherwise */
    public boolean isSetLatestUpdatedTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LATESTUPDATEDTIME_ISSET_ID);
    }

    public void setLatestUpdatedTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LATESTUPDATEDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NODE_INFO:
        if (value == null) {
          unsetNodeInfo();
        } else {
          setNodeInfo((java.lang.String)value);
        }
        break;

      case LATEST_UPDATED_TIME:
        if (value == null) {
          unsetLatestUpdatedTime();
        } else {
          setLatestUpdatedTime((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_INFO:
        return getNodeInfo();

      case LATEST_UPDATED_TIME:
        return getLatestUpdatedTime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NODE_INFO:
        return isSetNodeInfo();
      case LATEST_UPDATED_TIME:
        return isSetLatestUpdatedTime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addNode_args)
        return this.equals((addNode_args)that);
      return false;
    }

    public boolean equals(addNode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nodeInfo = true && this.isSetNodeInfo();
      boolean that_present_nodeInfo = true && that.isSetNodeInfo();
      if (this_present_nodeInfo || that_present_nodeInfo) {
        if (!(this_present_nodeInfo && that_present_nodeInfo))
          return false;
        if (!this.nodeInfo.equals(that.nodeInfo))
          return false;
      }

      boolean this_present_latestUpdatedTime = true;
      boolean that_present_latestUpdatedTime = true;
      if (this_present_latestUpdatedTime || that_present_latestUpdatedTime) {
        if (!(this_present_latestUpdatedTime && that_present_latestUpdatedTime))
          return false;
        if (this.latestUpdatedTime != that.latestUpdatedTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNodeInfo()) ? 131071 : 524287);
      if (isSetNodeInfo())
        hashCode = hashCode * 8191 + nodeInfo.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(latestUpdatedTime);

      return hashCode;
    }

    @Override
    public int compareTo(addNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNodeInfo()).compareTo(other.isSetNodeInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfo, other.nodeInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLatestUpdatedTime()).compareTo(other.isSetLatestUpdatedTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLatestUpdatedTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestUpdatedTime, other.latestUpdatedTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addNode_args(");
      boolean first = true;

      sb.append("nodeInfo:");
      if (this.nodeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("latestUpdatedTime:");
      sb.append(this.latestUpdatedTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNode_argsStandardScheme getScheme() {
        return new addNode_argsStandardScheme();
      }
    }

    private static class addNode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeInfo = iprot.readString();
                struct.setNodeInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LATEST_UPDATED_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.latestUpdatedTime = iprot.readI64();
                struct.setLatestUpdatedTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeInfo != null) {
          oprot.writeFieldBegin(NODE_INFO_FIELD_DESC);
          oprot.writeString(struct.nodeInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LATEST_UPDATED_TIME_FIELD_DESC);
        oprot.writeI64(struct.latestUpdatedTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNode_argsTupleScheme getScheme() {
        return new addNode_argsTupleScheme();
      }
    }

    private static class addNode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNodeInfo()) {
          optionals.set(0);
        }
        if (struct.isSetLatestUpdatedTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNodeInfo()) {
          oprot.writeString(struct.nodeInfo);
        }
        if (struct.isSetLatestUpdatedTime()) {
          oprot.writeI64(struct.latestUpdatedTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nodeInfo = iprot.readString();
          struct.setNodeInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.latestUpdatedTime = iprot.readI64();
          struct.setLatestUpdatedTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addNode_result implements org.apache.thrift.TBase<addNode_result, addNode_result._Fields>, java.io.Serializable, Cloneable, Comparable<addNode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addNode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addNode_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addNode_result.class, metaDataMap);
    }

    public addNode_result() {
    }

    public addNode_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addNode_result(addNode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addNode_result deepCopy() {
      return new addNode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public addNode_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addNode_result)
        return this.equals((addNode_result)that);
      return false;
    }

    public boolean equals(addNode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addNode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addNode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNode_resultStandardScheme getScheme() {
        return new addNode_resultStandardScheme();
      }
    }

    private static class addNode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addNode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addNode_resultTupleScheme getScheme() {
        return new addNode_resultTupleScheme();
      }
    }

    private static class addNode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateNode_args implements org.apache.thrift.TBase<updateNode_args, updateNode_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateNode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNode_args");

    private static final org.apache.thrift.protocol.TField NODE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateNode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateNode_argsTupleSchemeFactory();

    public java.lang.String nodeInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_INFO((short)1, "nodeInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_INFO
            return NODE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNode_args.class, metaDataMap);
    }

    public updateNode_args() {
    }

    public updateNode_args(
      java.lang.String nodeInfo)
    {
      this();
      this.nodeInfo = nodeInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNode_args(updateNode_args other) {
      if (other.isSetNodeInfo()) {
        this.nodeInfo = other.nodeInfo;
      }
    }

    public updateNode_args deepCopy() {
      return new updateNode_args(this);
    }

    @Override
    public void clear() {
      this.nodeInfo = null;
    }

    public java.lang.String getNodeInfo() {
      return this.nodeInfo;
    }

    public updateNode_args setNodeInfo(java.lang.String nodeInfo) {
      this.nodeInfo = nodeInfo;
      return this;
    }

    public void unsetNodeInfo() {
      this.nodeInfo = null;
    }

    /** Returns true if field nodeInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeInfo() {
      return this.nodeInfo != null;
    }

    public void setNodeInfoIsSet(boolean value) {
      if (!value) {
        this.nodeInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NODE_INFO:
        if (value == null) {
          unsetNodeInfo();
        } else {
          setNodeInfo((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_INFO:
        return getNodeInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NODE_INFO:
        return isSetNodeInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNode_args)
        return this.equals((updateNode_args)that);
      return false;
    }

    public boolean equals(updateNode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nodeInfo = true && this.isSetNodeInfo();
      boolean that_present_nodeInfo = true && that.isSetNodeInfo();
      if (this_present_nodeInfo || that_present_nodeInfo) {
        if (!(this_present_nodeInfo && that_present_nodeInfo))
          return false;
        if (!this.nodeInfo.equals(that.nodeInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNodeInfo()) ? 131071 : 524287);
      if (isSetNodeInfo())
        hashCode = hashCode * 8191 + nodeInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNodeInfo()).compareTo(other.isSetNodeInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfo, other.nodeInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateNode_args(");
      boolean first = true;

      sb.append("nodeInfo:");
      if (this.nodeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateNode_argsStandardScheme getScheme() {
        return new updateNode_argsStandardScheme();
      }
    }

    private static class updateNode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeInfo = iprot.readString();
                struct.setNodeInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeInfo != null) {
          oprot.writeFieldBegin(NODE_INFO_FIELD_DESC);
          oprot.writeString(struct.nodeInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateNode_argsTupleScheme getScheme() {
        return new updateNode_argsTupleScheme();
      }
    }

    private static class updateNode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNodeInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNodeInfo()) {
          oprot.writeString(struct.nodeInfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nodeInfo = iprot.readString();
          struct.setNodeInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateNode_result implements org.apache.thrift.TBase<updateNode_result, updateNode_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateNode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateNode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateNode_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNode_result.class, metaDataMap);
    }

    public updateNode_result() {
    }

    public updateNode_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNode_result(updateNode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updateNode_result deepCopy() {
      return new updateNode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public updateNode_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNode_result)
        return this.equals((updateNode_result)that);
      return false;
    }

    public boolean equals(updateNode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateNode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateNode_resultStandardScheme getScheme() {
        return new updateNode_resultStandardScheme();
      }
    }

    private static class updateNode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateNode_resultTupleScheme getScheme() {
        return new updateNode_resultTupleScheme();
      }
    }

    private static class updateNode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
